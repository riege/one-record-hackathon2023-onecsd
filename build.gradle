plugins {
	id 'org.springframework.boot' version '2.7.16'
	id 'io.spring.dependency-management' version '1.1.3'
	id 'java'
}

compileJava.options.encoding = "UTF-8"
compileTestJava.options.encoding = "UTF-8"

/*
 * Gets the version name from the latest Git tag, omit leading "v" - yeah!
 * Note: a plugin way to do this would be via https://plugins.gradle.org/plugin/net.nemerosa.versioning
 */
def getVersionName = { ->
	def stdout = new ByteArrayOutputStream()
	exec {
		commandLine 'git', 'describe', '--tags', '--always'
		standardOutput = stdout
		ignoreExitValue true
	}
	def tag = stdout.toString().trim()
	return tag.startsWith("v") ? tag.substring(1) : tag
}

/*
 * Gets the commit hash from the latest Git
 * Note: a plugin way to do this would be via https://plugins.gradle.org/plugin/net.nemerosa.versioning
 */
def getGitCommitHash = {
	def stdout = new ByteArrayOutputStream()
	exec {
		commandLine 'git', 'log', '-1', '--format="%H"'
		standardOutput = stdout
		ignoreExitValue true
	}
	return stdout.toString().trim().replace("\"", "")
}

version = version != null && version != "unspecified" ? version : getVersionName()

sourceCompatibility = JavaVersion.VERSION_11

group = 'com.riege'

jar {
	// disable generation of *-plain.jar in build/libs/
	// we want to generate the full (spring)"bootJar" only
	// when somebody executes "gradle build"
	// alternativly excute "gradle bootJar"
	// https://stackoverflow.com/questions/67663728/spring-boot-2-5-0-generates-plain-jar-file-can-i-remove-it
	enabled = false
	manifest {
		attributes(
				'Implementation-Version'    : archiveVersion,
				'Built-By'                  : System.properties['user.name'],
				'Build-Revision'            : getGitCommitHash(),
				'Build-Timestamp'			: new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ").format(new Date()),
				'Build-Jdk'      			: "${System.properties['java.version']} (${System.properties['java.vendor']} ${System.properties['java.vm.version']})",
				'Build-OS'      			 : "${System.properties['os.name']} ${System.properties['os.arch']} ${System.properties['os.version']}",
				'Created-By'     			: "Gradle ${gradle.gradleVersion}",
		)
	}
}
bootJar {
	manifest {
		attributes(
				'Implementation-Version'    : archiveVersion,
				'Built-By'                  : System.properties['user.name'],
				'Build-Revision'            : getGitCommitHash(),
				'Build-Timestamp'			: new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ").format(new Date()),
				'Build-Jdk'      			: "${System.properties['java.version']} (${System.properties['java.vendor']} ${System.properties['java.vm.version']})",
				'Build-OS'      			 : "${System.properties['os.name']} ${System.properties['os.arch']} ${System.properties['os.version']}",
				'Created-By'     			: "Gradle ${gradle.gradleVersion}",
		)
	}
}

repositories {
	// flatDir dirs: "$rootProject.projectDir/lib"
	mavenCentral()
	mavenLocal()
	maven {
		name = "Riege GitHubPackages"
		url = "https://maven.pkg.github.com/riege/packages"
		credentials {
			username = project.findProperty("github.packages.access.user") ?: System.getenv("GITHUB_PACKAGES_ACCESS_USER")
			password = project.findProperty("github.packages.access.token") ?: System.getenv("GITHUB_PACKAGES_ACCESS_TOKEN")
		}
	}
	maven { url 'https://jitpack.io' }
}

def wicketVersion = '9.12.0';

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web'
	// Mongo Database
	implementation 'org.springframework.boot:spring-boot-starter-data-mongodb'

	// == Metrics and Monitoring
	// File application.properties configures all details
	// for the URLs :8081/health and :8081/prometheus.
	// The following dependencies are requied:
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'io.micrometer:micrometer-registry-prometheus'

	// == Dependencies for the SpringBoot / Wicket integration:
	implementation 'com.giffing.wicket.spring.boot.starter:wicket-spring-boot-starter:3.1.7'
	implementation "org.apache.wicket:wicket-spring:${wicketVersion}"
	implementation "org.apache.wicket:wicket-auth-roles:${wicketVersion}"
	implementation "org.apache.wicket:wicket-extensions:${wicketVersion}"

	// required for local developer bootRun
	implementation 'org.springframework.boot:spring-boot-starter-activemq'

	// under JDK 11 and above, RSIXML2 requires the jaxb-runtime
	// see https://stackoverflow.com/questions/48204141/replacements-for-deprecated-jpms-modules-with-java-ee-apis
	// Note: 3.0.+ does not work with rsixml2
	implementation 'org.glassfish.jaxb:jaxb-runtime:2.3.7'

	implementation 'com.fasterxml.jackson.core:jackson-databind:2.14.0'
	// required to support java.time.LocalDateTime in jackson:
	implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310'

	implementation 'org.apache.pdfbox:pdfbox:3.0.0'

	implementation 'com.github.riege:one-record-jsonutils:0.9.2'
	implementation 'cz.cvut.kbss.jopa:jopa-api:0.22.2'

	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.boot:spring-boot-starter-activemq'
	testImplementation 'de.flapdoodle.embed:de.flapdoodle.embed.mongo:3.5.2'
	testImplementation 'org.xmlunit:xmlunit-core:2.9.0'
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:2021.0.5"
	}
}

test {
	useJUnitPlatform()
}
